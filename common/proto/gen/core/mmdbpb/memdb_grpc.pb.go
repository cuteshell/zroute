// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package mmdbpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MemDBClient is the client API for MemDB service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MemDBClient interface {
	GetRecords(ctx context.Context, in *TableName, opts ...grpc.CallOption) (*Records, error)
}

type memDBClient struct {
	cc grpc.ClientConnInterface
}

func NewMemDBClient(cc grpc.ClientConnInterface) MemDBClient {
	return &memDBClient{cc}
}

func (c *memDBClient) GetRecords(ctx context.Context, in *TableName, opts ...grpc.CallOption) (*Records, error) {
	out := new(Records)
	err := c.cc.Invoke(ctx, "/MemDB/GetRecords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MemDBServer is the server API for MemDB service.
// All implementations must embed UnimplementedMemDBServer
// for forward compatibility
type MemDBServer interface {
	GetRecords(context.Context, *TableName) (*Records, error)
	mustEmbedUnimplementedMemDBServer()
}

// UnimplementedMemDBServer must be embedded to have forward compatible implementations.
type UnimplementedMemDBServer struct {
}

func (*UnimplementedMemDBServer) GetRecords(context.Context, *TableName) (*Records, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecords not implemented")
}
func (*UnimplementedMemDBServer) mustEmbedUnimplementedMemDBServer() {}

func RegisterMemDBServer(s *grpc.Server, srv MemDBServer) {
	s.RegisterService(&_MemDB_serviceDesc, srv)
}

func _MemDB_GetRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TableName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemDBServer).GetRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemDB/GetRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemDBServer).GetRecords(ctx, req.(*TableName))
	}
	return interceptor(ctx, in, info, handler)
}

var _MemDB_serviceDesc = grpc.ServiceDesc{
	ServiceName: "MemDB",
	HandlerType: (*MemDBServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRecords",
			Handler:    _MemDB_GetRecords_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "memdb.proto",
}
